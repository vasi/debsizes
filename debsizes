#!/usr/bin/env python
import apt_pkg
import sys
import os
import math

# Utility wrapper over apt_pkg.Cache
class Cache(object):
	def __init__(self):
		apt_pkg.init()
		self.cache = apt_pkg.Cache(progress = None)
	
	# Get the installed Version of a package
	def inst_vers(self, name):
		return self.cache[name].current_ver
	
	# List all installed Packages
	def installed(self):
		return [p for p in self.cache.packages
			if p.current_state == apt_pkg.CURSTATE_INSTALLED]
	
	# List manually installed Packages
	def keepers(self):
		dcache = apt_pkg.DepCache(self.cache)
		return [p for p in self.installed()
			if not dcache.is_auto_installed(p)]

# Dependency graph of packages
class DepGraph(object):
	DepTypesDepends = {'Depends', 'PreDepends'}
	DepTypesDefault = DepTypesDepends | {'Recommends'}
	DepTypesSuggests = DepTypesDefault | {'Suggests'}
	
	class Package(object):
		def __init__(self, pkg):
			self.vers = pkg.current_ver
			self.name = self.vers.parent_pkg.get_fullname(pretty = True)
			
			# Two-level array, groups of alternatives
			# eg: "foo | bar, qux" -> [[foo, bar], [qux]]
			self.deps = []
			
			self.rdeps = [] # Reverse deps, one alternative per group
			self.rsoft = [] # Includes very alternative
		
		def __hash__(self):
			return self.vers.id
		def __eq__(self, other):
			return self.__hash__() == other.__hash__()
		
		# Get recursive dependencies
		def rec_deps(self, soft = False):
			todo = [self]
			ret = set()
			while todo:
				p = todo.pop()
				if p in ret:
					continue
				ret.add(p)
				
				for ds in p.deps:
					dwant = ds if soft else [ds[0]]
					for d in dwant:
						todo.append(d)
			return ret
		
	def __init__(self, cache, deptypes = DepTypesDefault):
		self.cache = cache
		self.deptypes = deptypes
		
		self.packages = dict()
		for p in cache.installed():
			pkg = DepGraph.Package(p)
			self.packages[pkg.name] = pkg
		self.id2pkg = {p.vers.id: p
			for p in self.packages.itervalues()}
		
		# Fill in dependencies
		for p in self.packages.itervalues():
			p.deps = self._deps(p.vers)
			for ds in p.deps:
				ds[0].rdeps.append(p)
				for d in ds:
					d.rsoft.append(p)
	
	def by_id(self, i):
		return self.id2pkg[i]
	def by_vers(self, v):
		return self.by_id(v.id)
	
	# Calculate the dependency sets for a package
	def _deps(self, v):
		ret = []
		for dtype, deps in v.depends_list.iteritems():
			if not dtype in self.deptypes:
				continue
			for ordep in deps:
				alt = self._ordeps(ordep)
				if alt:
					ret.append(alt)
		return ret
	def _ordeps(self, ds):
		alt = []
		seen = set()
		for d in ds:
			for v in reversed(d.all_targets()):
				if v.id not in self.id2pkg: # Check it's installed
					continue
				p = self.by_vers(v)
				if p not in seen:
					alt.append(p)
					seen.add(p)
		return alt
	
	def orphans(self):
		return [p for p in self.packages.itervalues()
			if not p.rdeps]
	def keepers(self):
		return [self.by_vers(p.current_ver)
			for p in self.cache.keepers()]
	def read_packages(self, path):
		path = os.path.expanduser(path)
		if not os.exists(path):
			return []
		with open(path) as f:
			names = [n.rstrip("\n") for n in f]
			return [self.packages[n] for n in names]

class DebSizer(object):
	def __init__(self, graph, roots = None):
		self.graph = graph
		self.base = []
		self.roots = roots or []
	
	class Package(object):
		def __init__(self, pkg):
			self.vers = pkg
			self.name = pkg.name
		def __hash__(self):
			return self.vers.__hash__()
		def __eq__(self, other):
			return self.vers == other.vers
		def desc(self):
			return self.name
	class Dependency(Package):
		def __init__(self, pkg):
			super(DebSizer.Dependency, self).__init__(pkg)
			self.size = self.vers.vers.installed_size
			self.portions = 0
		def used(self):
			return self.size / self.portions
		def desc(self):
			return "%2d %s" % (self.portions, self.name)
	class Root(Package):
		def __init__(self, pkg):
			super(DebSizer.Root, self).__init__(pkg)
			self.deps = []
		def add(self, dep):
			dep.portions += 1
			self.deps.append(dep)
		def used(self):
			return sum(d.used() for d in self.deps)
	
	def sizes(self):
		bset = set()
		for b in self.base:
			bset |= {d.vers.id for d in b.rec_deps()}
		
		ret = []
		deps = {}
		for rv in self.roots:
			r = DebSizer.Root(rv)
			for dv in rv.rec_deps() - bset:
				d = deps.setdefault(dv, DebSizer.Dependency(dv))
				r.add(d)
			ret.append(r)
		return ret
	
def format_size(size, space = 5):
	bases = "BKMGT"
	bi = int(math.log(max(size, 1), 1000))
	bspace = max(min(space - 3, 3), 1)
	b = bases[bi]
	if bspace >= 3:
		b = (b + "B") if bi > 0 else " B"
	if bspace >= 2:
		b = " " + b
	
	space -= bspace
	mant = size / 1000**bi
	dlen = space - len(str(int(mant))) - 1
	if dlen >= 1 and mant != int(mant):
		d = "%*.*f" % (space, dlen, mant)
	else:
		d = "%*d" % (space, mant)
	
	return d + b

def print_sizes(siz):
	siz.sort(key = lambda s: s.used(), reverse = True)
	for s in siz:
		if s.used() > 0:
			print "%s  %s" % (format_size(s.used()), s.desc())

if __name__ == "__main__":
	cache = Cache()
	graph = DepGraph(cache)
	sizer = DebSizer(graph, graph.keepers())
	sizer.base = graph.read_packages("~/Keepers/system")
	
	out = sizer.sizes()
	if len(sys.argv) >= 2:
		target = sys.argv[1]
		out = next(r for r in out if r.name == target).deps
	print_sizes(out)
